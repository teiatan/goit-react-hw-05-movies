{"version":3,"file":"static/js/415.9a1c252a.chunk.js","mappings":"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","sources":["components/moviesList/MoviesList.jsx","pages/Home.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","service/themoviedbApi.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nexport function MoviesList({title, movies, goBack}) {\n\n    return(\n        <>\n            {title && <h2>{title}</h2>}\n            <ul>\n                {movies.map(movie => {\n                    return(\n                        <li key={movie.id}>\n                            <Link to={`/movies/${movie.id}`} state={{from: goBack}}>{movie.title}</Link>\n                        </li>\n                    )\n                })}\n            </ul>\n        </>\n    );\n};\n\nMoviesList.propTypes = {\n    title: PropTypes.string,\n    movies: PropTypes.arrayOf(PropTypes.shape({\n        title: PropTypes.string,\n        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    }))\n};","import { useState, useEffect } from \"react\";\nimport { MoviesList } from \"components/moviesList/MoviesList\";\nimport { apiService } from \"service/themoviedbApi\";\n\nexport function Home() {\n    \n    const [movies, setMovies] = useState([]);\n\n    useEffect(()=>{\n        apiService.getMostPopularMovies().then(\n          response => setMovies(response)\n        );    \n      }, []);\n\n    return (\n        <MoviesList title=\"Trending today\" movies={movies} goBack={'/'}/>\n    );\n};","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","class ApiService {\n    apiKey = \"d31c9faeabd85b83726848cf0b50c5a1\";\n    baseUrl = \"https://api.themoviedb.org/3\";\n    mostPoularUrl = \"/trending/movie/day\";\n    byKeyWordUrl = \"/search/company\";\n    wholeMovieInformationUrl = \"/movie/\";\n    actorsUrl = \"/movies/\";\n    viewsUrl = \"/movie/\";\n \n\n    async getMostPopularMovies() {\n        let movies =[];\n        try {\n            await fetch(`${this.baseUrl}${this.mostPoularUrl}?api_key=${this.apiKey}`)\n            .then(response => response.json())\n            .then(data => {\n                movies = data.results;\n            });\n        } catch(error) {\n            console.log(`fetch error: ${error}`)\n        };\n        return(movies);\n    };\n\n    async getMoviesByKeyWord(keyWord) {\n        let moviesByKeyWord =null;\n        try {\n            await fetch(`${this.baseUrl}${this.byKeyWordUrl}?api_key=${this.apiKey}&query=${keyWord}`)\n            .then(response => response.json())\n            .then(data => moviesByKeyWord=data);\n        } catch(error) {\n            console.log(`fetch error: ${error}`)\n        };\n        return(moviesByKeyWord);\n    };\n\n    async getWholeMovieInformation(id) {\n        let movieInfo = null;\n        try {\n            await fetch(`${this.baseUrl}${this.wholeMovieInformationUrl}${id}?api_key=${this.apiKey}`)\n            .then(response => response.json())\n            .then(data => movieInfo=data)\n\n        } catch(error) {\n            console.log(error)\n        }\n        return (movieInfo);\n    };\n\n    async getMovieCast(id) {\n        let movieCast = null;\n        try {\n            await fetch(`${this.baseUrl}${this.wholeMovieInformationUrl}${id}?api_key=${this.apiKey}`)\n            .then(response => response.json())\n            .then(data => movieCast=data)\n\n        } catch(error) {\n            console.log(error)\n        }\n        return (movieCast);\n    };\n\n    async getMovieReviews(id) {\n        let movieReviews = null;\n        try {\n            await fetch(`${this.baseUrl}/movie/${id}/reviews?api_key=${this.apiKey}`)\n            .then(response => response.json())\n            .then(data => movieReviews=data)\n        } catch(error) {\n            console.log(error)\n        }\n        return (movieReviews);\n    };\n\n    async getMovieActors(id) {\n        let cast = null;\n        try {\n            await fetch(`${this.baseUrl}/movie/${id}/credits?api_key=${this.apiKey}`)\n            .then(response => response.json())\n            .then(data => cast=data)\n        } catch(error) {\n            console.log(error)\n        }\n        return (cast);\n    };\n};\n\nexport const apiService = new ApiService();"],"names":["MoviesList","title","movies","goBack","map","movie","to","id","state","from","Home","useState","setMovies","useEffect","apiService","then","response","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","ApiService","apiKey","baseUrl","mostPoularUrl","byKeyWordUrl","wholeMovieInformationUrl","actorsUrl","viewsUrl","fetch","json","data","results","console","log","keyWord","moviesByKeyWord","movieInfo","movieCast","movieReviews","cast"],"sourceRoot":""}